Введите количество переменных (основных столбцов): 2
Введите количество ограничений (основных строк): 4
Программа реализована для 2 переменных и 4 уравнений в системе.
Если в симплекс таблице элемент - буква, то необходимо ввести: -0
Формат записи координат: [строка, столбец].
Введите элементы симплекс таблицы по строкам! Для решения исходной задачи: 
[0, 0]: -0
[0, 1]: -0
[0, 2]: 3
[0, 3]: 2
[0, 4]: -0
[1, 0]: -0
[1, 1]: -0
[1, 2]: 1
[1, 3]: 2
[1, 4]: -0
[2, 0]: 0
[2, 1]: 3
[2, 2]: 1
[2, 3]: 2
[2, 4]: 6
[3, 0]: 0
[3, 1]: 4
[3, 2]: 2
[3, 3]: 1
[3, 4]: 8
[4, 0]: 0
[4, 1]: 5
[4, 2]: -1
[4, 3]: 1
[4, 4]: 1
[5, 0]: 0
[5, 1]: 6
[5, 2]: 0
[5, 3]: 1
[5, 4]: 2
[6, 0]: -0
[6, 1]: -0
[6, 2]: 0
[6, 3]: 0
[6, 4]: -0


Входная таблица:
 -0 -0  3  2 -0
 -0 -0  1  2 -0
  0  3  1  2  6
  0  4  2  1  8
  0  5 -1  1  1
  0  6  0  1  2
 -0 -0 -3 -2  0

Решение исходной задачи симплекс-методом:
Разрешающий элемент: [3, 2], таблица:
   -0   -0    0    2   -0
   -0   -0    4    2   -0
    0    3 -0,5  1,5    2
    3    1  0,5  0,5    4
    0    5  0,5  1,5    5
    0    6   -0    1    2
   -0   -0  1,5 -0,5   12

Разрешающий элемент: [2, 3], таблица:
     -0     -0      0      0     -0
     -0     -0      4      3     -0
      2      2 -0,333  0,667  1,333
      3      1  0,667 -0,333  3,333
      0      5      1     -1      3
      0      6  0,333 -0,667  0,667
     -0     -0  1,333  0,333 12,667

Коэффициенты целевой функции для двойственной задачи:
6  8  1  2

Транспонированная матрица для двойственной задачи:
     1     2    -1     0
     2     1     1     1
Свободные коэффициенты для двойственной задачи:
3  2


Базисные переменные из последней симплекс таблицы:
2 1 5 6 

Составленная матрица D:
  2  1  0  0
  1  2  0  0
  1 -1  1  0
  1  0  0  1

  2  1  0  0  1  0  0  0
  1  2  0  0  0  1  0  0
  1 -1  1  0  0  0  1  0
  1  0  0  1  0  0  0  1

badRows: 0, 1, 3, 2
indexesForFix(0): [0, 1]
indexesNotEmpty[1]: [0, 1]
indexesNotEmpty[1].IntersectWith(indexesForFix): [0, 1]
indexesNotEmpty[1].ExceptWith(indexesNotTouch): [0, 1]
rowCompensation: (1, [0, 1])
indexColumnForAdd: 0
CoefficientForAdd: -2
  0 -3  0  0  1 -2  0  0
  1  2  0  0  0  1  0  0
  1 -1  1  0  0  0  1  0
  1  0  0  1  0  0  0  1

badRows: 1, 3, 2
indexesForFix(1): [0, 1]
indexesNotEmpty[0]: [1]
indexesNotEmpty[0].IntersectWith(indexesForFix): [1]
indexesNotEmpty[0].ExceptWith(indexesNotTouch): [1]
rowCompensation: (0, [1])
indexColumnForAdd: 1
CoefficientForAdd: 0,6666666666666666
                    0                   -3                    0                    0                    1                   -2                    0                    0
                    1                    0                    0                    0   0,6666666666666666 -0,33333333333333326                    0                    0
                    1                   -1                    1                    0                    0                    0                    1                    0
                    1                    0                    0                    1                    0                    0                    0                    1

badRows: 3, 2
indexesForFix(3): [0, 3]
indexesNotEmpty[1]: [0]
indexesNotEmpty[1].IntersectWith(indexesForFix): [0]
indexesNotEmpty[1].ExceptWith(indexesNotTouch): [0]
rowCompensation: (1, [0])
indexColumnForAdd: 0
CoefficientForAdd: -1
                    0                   -3                    0                    0                    1                   -2                    0                    0
                    1                    0                    0                    0   0,6666666666666666 -0,33333333333333326                    0                    0
                    1                   -1                    1                    0                    0                    0                    1                    0
                    0                    0                    0                    1  -0,6666666666666666  0,33333333333333326                    0                    1

badRows: 2
indexesForFix(2): [0, 1, 2]
indexesNotEmpty[0]: [1]
indexesNotEmpty[0].IntersectWith(indexesForFix): [1]
indexesNotEmpty[0].ExceptWith(indexesNotTouch): [1]
rowCompensation: (0, [1])
indexColumnForAdd: 1
CoefficientForAdd: -0,3333333333333333
                    0                   -3                    0                    0                    1                   -2                    0                    0
                    1                    0                    0                    0   0,6666666666666666 -0,33333333333333326                    0                    0
                    1                    0                    1                    0  -0,3333333333333333   0,6666666666666666                    1                    0
                    0                    0                    0                    1  -0,6666666666666666  0,33333333333333326                    0                    1

badRows: 2
indexesForFix(2): [0, 2]
indexesNotEmpty[1]: [0]
indexesNotEmpty[1].IntersectWith(indexesForFix): [0]
indexesNotEmpty[1].ExceptWith(indexesNotTouch): [0]
rowCompensation: (1, [0])
indexColumnForAdd: 0
CoefficientForAdd: -1
                    0                   -3                    0                    0                    1                   -2                    0                    0
                    1                    0                    0                    0   0,6666666666666666 -0,33333333333333326                    0                    0
                    0                    0                    1                    0                   -1   0,9999999999999999                    1                    0
                    0                    0                    0                    1  -0,6666666666666666  0,33333333333333326                    0                    1

badRows: 
MoveRowsIfNeed:
                    1                    0                    0                    0   0,6666666666666666 -0,33333333333333326                    0                    0
                    0                   -3                    0                    0                    1                   -2                    0                    0
                    0                    0                    1                    0                   -1   0,9999999999999999                    1                    0
                    0                    0                    0                    1  -0,6666666666666666  0,33333333333333326                    0                    1

Normalize:
                    1                    0                    0                    0   0,6666666666666666 -0,33333333333333326                    0                    0
                   -0                    1                   -0                   -0  -0,3333333333333333   0,6666666666666666                   -0                   -0
                    0                    0                    1                    0                   -1   0,9999999999999999                    1                    0
                    0                    0                    0                    1  -0,6666666666666666  0,33333333333333326                    0                    1

output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[0, 0] = matrixWidth[0, 4];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[0, 1] = matrixWidth[0, 5];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[0, 2] = matrixWidth[0, 6];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[0, 3] = matrixWidth[0, 7];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[1, 0] = matrixWidth[1, 4];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[1, 1] = matrixWidth[1, 5];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[1, 2] = matrixWidth[1, 6];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[1, 3] = matrixWidth[1, 7];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[2, 0] = matrixWidth[2, 4];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[2, 1] = matrixWidth[2, 5];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[2, 2] = matrixWidth[2, 6];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[2, 3] = matrixWidth[2, 7];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[3, 0] = matrixWidth[3, 4];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[3, 1] = matrixWidth[3, 5];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[3, 2] = matrixWidth[3, 6];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[3, 3] = matrixWidth[3, 7];
GetRightMatrix:
   0,6666666666666666 -0,33333333333333326                    0                    0
  -0,3333333333333333   0,6666666666666666                   -0                   -0
                   -1   0,9999999999999999                    1                    0
  -0,6666666666666666  0,33333333333333326                    0                    1


Обратная Матрица D:
   0,6666666666666666 -0,33333333333333326                    0                    0
  -0,3333333333333333   0,6666666666666666                   -0                   -0
                   -1   0,9999999999999999                    1                    0
  -0,6666666666666666  0,33333333333333326                    0                    1

Базисный вектор:
2 3 0 0

Базисный вектор (5,3,0,0) умножаем на обратную матрицу D
0,33333333333333326
1,3333333333333335
0
0
Получившийся вектор умножаем на свободные коэффициенты прямой задачи. Результат для G -> min: 12,666666666666668
Результат для F -> max: 12,666666666666666
