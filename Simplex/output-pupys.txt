Введите количество переменных (основных столбцов): 2
Введите количество ограничений (основных строк): 4
Программа реализована для 2 переменных и 4 уравнений в системе.
Если в симплекс таблице элемент - буква, то необходимо ввести: -0
Формат записи координат: [строка, столбец].
Введите элементы симплекс таблицы по строкам! Для решения исходной задачи: 
[0, 0]: -0
[0, 1]: -0
[0, 2]: 3
[0, 3]: 5
[0, 4]: -0
[1, 0]: -0
[1, 1]: -0
[1, 2]: 1
[1, 3]: 2
[1, 4]: -0
[2, 0]: 0
[2, 1]: 3
[2, 2]: 10
[2, 3]: 70
[2, 4]: 570
[3, 0]: 0
[3, 1]: 4
[3, 2]: 20
[3, 3]: 50
[3, 4]: 420
[4, 0]: 0
[4, 1]: 5
[4, 2]: 300
[4, 3]: 400
[4, 4]: 5000
[5, 0]: 0
[5, 1]: 6
[5, 2]: 200
[5, 3]: 100
[5, 4]: 3400
[6, 0]: -0
[6, 1]: -0
[6, 2]: 0
[6, 3]: 0
[6, 4]: -0


Входная таблица:
   -0   -0    3    5   -0
   -0   -0    1    2   -0
    0    3   10   70  570
    0    4   20   50  420
    0    5  300  400 5000
    0    6  200  100 3400
   -0   -0   -3   -5    0

Решение исходной задачи симплекс-методом:
Разрешающий элемент: [2, 3], таблица:
       -0       -0        3        0       -0
       -0       -0        1        3       -0
        5        2    0,143    0,014    8,143
        0        4   12,857   -0,714   12,857
        0        5  242,857   -5,714 1742,857
        0        6  185,714   -1,429 2585,714
       -0       -0   -2,286    0,071   40,714

Разрешающий элемент: [3, 2], таблица:
      -0      -0       0       0      -0
      -0      -0       4       3      -0
       5       2  -0,011   0,022       8
       3       1   0,078  -0,056       1
       0       5 -18,889   7,778    1500
       0       6 -14,444   8,889    2400
      -0      -0   0,178  -0,056      43

Разрешающий элемент: [4, 3], таблица:
      -0      -0       0       0      -0
      -0      -0       4       5      -0
       5       2   0,043  -0,003   3,714
       3       1  -0,057   0,007  11,714
       0       3  -2,429   0,129 192,857
       0       6   7,143  -1,143 685,714
      -0      -0   0,043   0,007  53,714

Коэффициенты целевой функции для двойственной задачи:
570  420  5000  3400

Транспонированная матрица для двойственной задачи:
    10    20   300   200
    70    50   400   100
Свободные коэффициенты для двойственной задачи:
3  5


Базисные переменные из последней симплекс таблицы:
2 1 3 6 

Составленная матрица D:
  70  10   1   0
  50  20   0   0
 400 300   0   0
 100 200   0   1

  70  10   1   0   1   0   0   0
  50  20   0   0   0   1   0   0
 400 300   0   0   0   0   1   0
 100 200   0   1   0   0   0   1

badRows: 1, 2, 0, 3
indexesForFix(1): [0, 1]
indexesNotEmpty[2]: [0, 1]
indexesNotEmpty[2].IntersectWith(indexesForFix): [0, 1]
indexesNotEmpty[2].ExceptWith(indexesNotTouch): [0, 1]
rowCompensation: (2, [0, 1])
indexColumnForAdd: 0
CoefficientForAdd: -0,125
     70     10      1      0      1      0      0      0
      0  -17,5      0      0      0      1 -0,125      0
    400    300      0      0      0      0      1      0
    100    200      0      1      0      0      0      1

badRows: 2, 0, 3
indexesForFix(2): [0, 1]
indexesNotEmpty[1]: [1]
indexesNotEmpty[1].IntersectWith(indexesForFix): [1]
indexesNotEmpty[1].ExceptWith(indexesNotTouch): [1]
rowCompensation: (1, [1])
indexColumnForAdd: 1
CoefficientForAdd: 17,142857142857142
                  70                  10                   1                   0                   1                   0                   0                   0
                   0               -17,5                   0                   0                   0                   1              -0,125                   0
                 400                   0                   0                   0                   0  17,142857142857142 -1,1428571428571428                   0
                 100                 200                   0                   1                   0                   0                   0                   1

badRows: 0, 3
indexesForFix(0): [0, 1, 2]
indexesNotEmpty[1]: [1]
indexesNotEmpty[1].IntersectWith(indexesForFix): [1]
indexesNotEmpty[1].ExceptWith(indexesNotTouch): [1]
rowCompensation: (1, [1])
indexColumnForAdd: 1
CoefficientForAdd: 0,5714285714285714
                   70                    0                    1                    0                    1   0,5714285714285714 -0,07142857142857142                    0
                    0                -17,5                    0                    0                    0                    1               -0,125                    0
                  400                    0                    0                    0                    0   17,142857142857142  -1,1428571428571428                    0
                  100                  200                    0                    1                    0                    0                    0                    1

badRows: 0, 3
indexesForFix(0): [0, 2]
indexesNotEmpty[2]: [0]
indexesNotEmpty[2].IntersectWith(indexesForFix): [0]
indexesNotEmpty[2].ExceptWith(indexesNotTouch): [0]
rowCompensation: (2, [0])
indexColumnForAdd: 0
CoefficientForAdd: -0,175
                   0                   0                   1                   0                   1  -2,428571428571428 0,12857142857142856                   0
                   0               -17,5                   0                   0                   0                   1              -0,125                   0
                 400                   0                   0                   0                   0  17,142857142857142 -1,1428571428571428                   0
                 100                 200                   0                   1                   0                   0                   0                   1

badRows: 3
indexesForFix(3): [0, 1, 3]
indexesNotEmpty[1]: [1]
indexesNotEmpty[1].IntersectWith(indexesForFix): [1]
indexesNotEmpty[1].ExceptWith(indexesNotTouch): [1]
rowCompensation: (1, [1])
indexColumnForAdd: 1
CoefficientForAdd: 11,428571428571429
                   0                   0                   1                   0                   1  -2,428571428571428 0,12857142857142856                   0
                   0               -17,5                   0                   0                   0                   1              -0,125                   0
                 400                   0                   0                   0                   0  17,142857142857142 -1,1428571428571428                   0
                 100                   0                   0                   1                   0  11,428571428571429 -1,4285714285714286                   1

badRows: 3
indexesForFix(3): [0, 3]
indexesNotEmpty[2]: [0]
indexesNotEmpty[2].IntersectWith(indexesForFix): [0]
indexesNotEmpty[2].ExceptWith(indexesNotTouch): [0]
rowCompensation: (2, [0])
indexColumnForAdd: 0
CoefficientForAdd: -0,25
                   0                   0                   1                   0                   1  -2,428571428571428 0,12857142857142856                   0
                   0               -17,5                   0                   0                   0                   1              -0,125                   0
                 400                   0                   0                   0                   0  17,142857142857142 -1,1428571428571428                   0
                   0                   0                   0                   1                   0   7,142857142857143 -1,1428571428571428                   1

badRows: 
MoveRowsIfNeed:
                 400                   0                   0                   0                   0  17,142857142857142 -1,1428571428571428                   0
                   0               -17,5                   0                   0                   0                   1              -0,125                   0
                   0                   0                   1                   0                   1  -2,428571428571428 0,12857142857142856                   0
                   0                   0                   0                   1                   0   7,142857142857143 -1,1428571428571428                   1

Normalize:
                     1                     0                     0                     0                     0   0,04285714285714286 -0,002857142857142857                     0
                    -0                     1                    -0                    -0                    -0  -0,05714285714285714  0,007142857142857143                    -0
                     0                     0                     1                     0                     1    -2,428571428571428   0,12857142857142856                     0
                     0                     0                     0                     1                     0     7,142857142857143   -1,1428571428571428                     1

output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[0, 0] = matrixWidth[0, 4];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[0, 1] = matrixWidth[0, 5];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[0, 2] = matrixWidth[0, 6];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[0, 3] = matrixWidth[0, 7];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[1, 0] = matrixWidth[1, 4];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[1, 1] = matrixWidth[1, 5];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[1, 2] = matrixWidth[1, 6];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[1, 3] = matrixWidth[1, 7];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[2, 0] = matrixWidth[2, 4];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[2, 1] = matrixWidth[2, 5];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[2, 2] = matrixWidth[2, 6];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[2, 3] = matrixWidth[2, 7];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[3, 0] = matrixWidth[3, 4];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[3, 1] = matrixWidth[3, 5];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[3, 2] = matrixWidth[3, 6];
output[y, x - matrixWidth.GetLength(1) / 2] = matrixWidth[y, x]; // output[3, 3] = matrixWidth[3, 7];
GetRightMatrix:
                     0   0,04285714285714286 -0,002857142857142857                     0
                    -0  -0,05714285714285714  0,007142857142857143                    -0
                     1    -2,428571428571428   0,12857142857142856                     0
                     0     7,142857142857143   -1,1428571428571428                     1


Обратная Матрица D:
                     0   0,04285714285714286 -0,002857142857142857                     0
                    -0  -0,05714285714285714  0,007142857142857143                    -0
                     1    -2,428571428571428   0,12857142857142856                     0
                     0     7,142857142857143   -1,1428571428571428                     1

Базисный вектор:
5 3 0 0

Базисный вектор (5,3,0,0) умножаем на обратную матрицу D
0
0,04285714285714287
0,0071428571428571435
0
Получившийся вектор умножаем на свободные коэффициенты прямой задачи. Результат для G -> min: 53,71428571428572
Результат для F -> max: 53,714285714285715
